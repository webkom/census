import should
import chai: expect
import assert
import supertest as request

import ../redis
import ../app
import ../dummy: servers

r = redis.client()

describe('GET /', () ->
    beforeEach((done) ->
        for server in servers
            r.hset('servers', server.hostname, JSON.stringify(server))
        done()
    )

    afterEach((done) ->
        r.flushall(done)
    )

    it('should respond html and status 200', (done) ->
        request(app)
            .get('/')
            .expect(200)
            .expect('Content-Type', /html/, done)
    )

    it('should respond status 200 when redis is empty', (done) ->
        r.flushall()
        request(app)
            .get('/')
            .expect(200, done)
    )

    it('should list the servers', (done) ->
        request(app)
            .get('/')
            .expect(200)
            .end((err, res) ->
                if err
                    done(err)
                expect(res.text).to.contain('luke.abakus.no')
                expect(res.text).to.contain('leia.abakus.no')
                done()
            )
    )
    it('should hide private servers', (done) ->
        request(app)
            .get('/')
            .expect(200)
            .end((err, res) ->
                if err
                    done(err)
                expect(res.text).to.not.contain('lkng.me')
                done()
            )
    )

    it('should add color class based on timestamp', (done) ->
        request(app)
            .get('/')
            .expect(200)
            .end((err, res) ->
                if err
                    done(err)
                expect(res.text).to.contain('green')
                expect(res.text).to.contain('red')
                done()
            )
    )

    it('should hide old nodes', (done) ->
        request(app)
            .get('/')
            .expect(200)
            .end((err, res) ->
                if err
                    done(err)
                expect(res.text).to.not.contain('coffee')
                done()
            )
    )
)
